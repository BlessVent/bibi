/*!
 *
 * # BiB/i Extention: JaTEx
 *
 * - "Japanes Typesetting Extra"
 * - Copyright (c) Satoru MATSUSHIMA - http://bibi.epub.link/ or https://github.com/satorumurmur/bibi
 * - Licensed under the MIT license. - http://www.opensource.org/licenses/mit-license.php
 *
 * - Thu July 2 14:36:00 2015 +0900
 */
Bibi.x({name:"JaTEx",description:"Japanese Typesetting Extra",version:"0.1.0",build:20150702,HTMLString:"",Current:0,Log:!1,LogCorrection:!1,LogCancelation:!1,parse:function(a){return a&&"object"==typeof a&&a.tagName&&(a=a.innerHTML),a&&"string"==typeof a?(this.HTMLString=a,this.Current=0,this.Log&&(this.log(1,"BiB/i JaTEx"),this.log(2,"parse"),this.log(3,"HTMLString: "+this.HTMLString)),this.parseInnerHTML()):null},parseInnerHTML:function(){for(var a=(this.Current,[]),b=this.parsePart();null!==b&&(a.push(b),b=this.parsePart()););return a.length?a:null},parsePart:function(){var a=(this.Current,{}),b=this.parseString(/^<[^>]*?>/);if(b)return/^<!--/.test(b)?a.Type="Comment":(a.Type="Tag",/^<ruby[ >]/.test(b)?a.Detail="ruby:open":/^<\/ruby>/.test(b)?a.Detail="ruby:close":/^<span[ >]/.test(b)&&/ class="([\w\d\-]+[\s\t]+)*(tcy|sideways|upright)([\s\t]+[\w\d\-]+)*"/.test(b)?a.Detail="span.x:open":/^<span[ >]/.test(b)?a.Detail="span:open":/^<\/span>/.test(b)&&(a.Detail="span:close")),a.Content=b,a;var c=this.parseString(/[^<]+/);return c?(a.Type="Text",a.Content=c,a):null},parseString:function(a){var b=null,c=!1;if(a instanceof RegExp){var d=this.HTMLString.substr(this.Current,this.HTMLString.length-this.Current);a.test(d)&&(c=!0,a=d.match(a)[0])}else this.HTMLString.substr(this.Current,a.length)===a&&(c=!0);return c&&(this.Current+=a.length,b=a),this.correct(b)},correct:function(a){return this.Log&&this.LogCorrection&&a&&this.log(3,a),a},cancel:function(a,b){return this.Log&&this.LogCancelation&&this.log(4,"cancel: parse"+b+" ("+a+"-"+this.Current+"/"+this.HTMLString.length+")"),"number"==typeof a&&(this.Current=a),null},log:function(a,b){this.Log&&console&&console.log&&(0==a?b="[ERROR] "+b:1==a?b="---------------- "+b+" ----------------":2==a?b=b:3==a?b=" - "+b:4==a&&(b="   . "+b),console.log("BiB/i JaTEx: "+b))},Selector:"p, li"})(function(){E.bind("bibi:postprocessItem",function(a){if(P["japanese-typesetting-extra"]||a.HTML.getAttribute("data-bibi-jatex")){a.logNow("JaTEx Preprocess"),a.JaTEx={Blocks:a.Body.querySelectorAll(X.JaTEx.Selector),TextBlocksLength:0};for(var b=0,c=a.JaTEx.Blocks.length;c>b;b++){var d=a.JaTEx.Blocks[b],e=X.JaTEx.parse(d.innerHTML);if(e&&e.length){var f="";IgnoringRuby=0,IgnoringSpan=0,sML.each(e,function(){var b=this;"Comment"==b.Type||("Tag"==b.Type?"ruby:open"==b.Detail?IgnoringRuby++:"ruby:close"==b.Detail?IgnoringRuby--:"span.x:open"==b.Detail?IgnoringSpan++:"span:open"==b.Detail&&(IgnoringRuby||IgnoringSpan?IgnoringSpan++:"span:close"==b.Detail&&(IgnoringRuby||IgnoringSpan)&&IgnoringSpan--):IgnoringRuby||IgnoringSpan||(a.JaTEx.TextBlocksLength++,b.Content=b.Content.replace(/(（([^（）]+)）)/g,'</span><span class="parenthesized with-fullwidth-parentheses">（<span>$2</span>）</span><span>').replace(/(\(([^\(\)]+)\))/g,'</span><span class="parenthesized with-parentheses">(<span>$2</span>)</span><span>').replace(/(「([^「」]+)」)/g,'</span><span class="bracketed with-corner-brackets">「<span>$2</span>」</span><span>').replace(/(『([^『』]+)』)/g,'</span><span class="bracketed with-double-corner-brackets">『<span>$2</span>』</span><span>').replace(/(〈([^〈〉]+)〉)/g,'</span><span class="bracketed with-anble-brackets">〈<span>$2</span>〉</span><span>').replace(/(《([^《》]+)》)/g,'</span><span class="bracketed with-double-anble-brackets">《<span>$2</span>》</span><span>').replace(/(｛([^｛｝]+)｝)/g,'</span><span class="bracketed with-fullwidth-curly-brackets">｛<span>$2</span>｝</span><span>').replace(/(［([^［］]+)］)/g,'</span><span class="bracketed with-fullwidth-square-brackets">［<span>$2</span>］</span><span>').replace(/(【([^【】]+)】)/g,'</span><span class="bracketed with-black-lenticular-brackets">【<span>$2</span>】</span><span>').replace(/(“([^“”]+)”)/g,'</span><span class="quoted with-double-quotation-marks">“<span>$2</span>”</span><span>').replace(/(‘([^‘’]+)’)/g,'</span><span class="quoted with-single-quotation-marks">‘<span>$2</span>’</span><span>').replace(/(　)/g,'</span><span class="ideographic-space">$1</span><span>').replace(/(、)/g,'</span><span class="ideographic-comma">$1</span><span>').replace(/(。)/g,'</span><span class="ideographic-full-stop">$1</span><span>').replace(/(・{7,})/g,'</span><span class="repeated katakana-middle-dots"><span>$1</span></span><span>').replace(/(・・・・・・)/g,'</span><span class="repeated as-doublewidth-horizontal-ellipsis"><span>$1</span></span><span>').replace(/(・{4,5})/g,'</span><span class="repeated katakana-middle-dots"><span>$1</span></span><span>').replace(/(・・・)/g,'</span><span class="repeated as-horizontal-ellipsis"><span>$1</span></span><span>').replace(/(・)/g,'</span><span class="katakana-middle-dot">$1</span><span>').replace(/(…{3,})/g,'</span><span class="repeated horizontal-ellipses"><span>$1</span>/span><span>').replace(/(……)/g,'</span><span class="repeated as-doublewidth-horizontal-ellipsis"><span>$1</span></span><span>').replace(/(…)/g,'</span><span class="horizontal-ellipsis">$1</span><span>').replace(/(⋯{3,})/g,'</span><span class="repeated midline-horizontal-ellipses"><span>$1</span></span><span>').replace(/(⋯⋯)/g,'</span><span class="repeated as-doublewidth-midline-horizontal-ellipsis"><span>$1</span></span><span>').replace(/(⋯)/g,'</span><span class="midline-horizontal-ellipsis">$1</span><span>').replace(/―/g,"—").replace(/(—{3,})/g,'</span><span class="repeated em-dashes"><span>$1</span></span><span>').replace(/(——)/g,'</span><span class="repeated as-doublewidth-em-dash"><span>$1</span></span><span>').replace(/(—)/g,'</span><span class="em-dash">$1</span><span>').replace(/(！{3,})/g,'</span><span class="repeated fullwidth-exclamation-marks"><span>$1</span></span><span>').replace(/(？{3,})/g,'</span><span class="repeated fullwidth-question-marks"><span>$1</span></span><span>').replace(/(！！)/g,'</span><span class="coupled as-double-exclamation-mark"><span>$1</span></span><span>').replace(/(？？)/g,'</span><span class="coupled as-double-question-mark"><span>$1</span></span><span>').replace(/(！？)/g,'</span><span class="coupled as-exclamation-question-mark"><span>$1</span></span><span>').replace(/(？！)/g,'</span><span class="coupled as-question-exclamation-mark"><span>$1</span></span><span>'),b.Content="<span>"+b.Content+"</span>")),f+=b.Content}),d.innerHTML=f.replace(/<span><\/span>/g,""),sML.each(d.querySelectorAll(".repeated"),function(){this.innerHTML=this.innerHTML.replace(/<[^>]+>/g,"")}),sML.each(d.querySelectorAll(".coupled"),function(){this.innerHTML=this.innerHTML.replace(/<[^>]+>/g,"")})}}a.logNow("JaTEx Preprocessed: "+a.JaTEx.TextBlocksLength+" Text Blocks / "+a.JaTEx.Blocks.length+" Blocks")}}),E.bind("bibi:resetItem",function(a){if(sML.UA.WebKit&&!sML.UA.Android){a.logNow("JaTEx Layout");var b=/^tb/.test(a.HTML.WritingMode);sML.each(a.Body.querySelectorAll(".ideographic-space, .ideographic-comma, .ideographic-full-stop"),function(){sML.style(this,{display:"",margin:"",transform:""})}),sML.each(a.Body.querySelectorAll(X.JaTEx.Selector),function(){{var a=this.appendChild(sML.create("span",{},{display:"block"})),c=a.appendChild(sML.create("span",{},{display:"block",textAlign:"left"})).appendChild(sML.create("span"))["offset"+S.BASE.S];a.appendChild(sML.create("span",{},{display:"block",textAlign:"right"})).appendChild(sML.create("span"))["offset"+S.BASE.S]}this.removeChild(a),sML.each(this.querySelectorAll(".ideographic-space, .ideographic-comma, .ideographic-full-stop"),function(){this.style.display="inline-block",this["offset"+S.BASE.S]==c?(this.style["margin"+S.BASE.S]="-1em",sML.style(this,{transform:"translate"+(b?"Y":"X")+"(1em)"})):this.style.display=""})}),a.logNow("JaTEx Layouted")}})});




□ 指定マニュアル（仮）（文責：松島 智）




かんたんですが、各項目を解説します。

そのうちどこか別のところにまとめますので、
（ほぼ深夜に書いたせいで）文体や言いまわしがめちゃくちゃなのも含め、
しばしご容赦ください。


このプリセットファイルは、URL のクエリで使い分けることができます。

EPUB をドラッグアンドドロップしてもらうときも予め設定を読ませておけますし、
（http://anatano.website/bib/i/?preset=PRESET.js）
EPUB を Ajax で取得してもらう場合も、EPUB とプリセットをペアにした URL を発行できるわけです。
（http://anatano.website/bib/i/?book=EPUB.epub&preset=PRESET.js）

指定がないときは、同梱の bib/preset/default.js が使用されます。


以下、具体的な指定について説明しますが、
多くは、対象とする EPUB によって一長一短があります。
（だからこそプリセットとして編集可能にしたわけなのですが）

読者自身がコントロールパネルで変更できる項目もありますが、
もしご自身で作成した EPUB を読者に見せたい場合や、
ご自身で見た目をカスタマイズした BiB/i を読者に使ってもらいたい場合など、
EPUB に合わせたスタイルやあなたらしいスタイルを予めプリセットで指定しておくと、
きっとステキだと思いますよ☆

（要は投げているのです。）
（いえ、ウソです、ちゃんとデフォルトも考慮してます。）




■ name: "なまえ" …… プリセットの任意名称

いまのところどこにも使用されていませんが、
コントロールパネルからプリセットを切り替える機能がつく予定で、
その暁には設定パネル内でラベルとして使用される予定であります。


■ description: "説明" …… プリセットの内容説明

これも、切り替え機能で使う予定です。


■ "book-display-mode" …… 表示モード（全部・見開き・ファイル単体）の初期値

"all" を指定すると、書籍の表示データすべてを並べます。
"spread" では見開き単位。固定レイアウトなどでは２つのアイテムで１つの見開きを構成するものが多いです。
"item" は、ファイル単位。見開きの左右ページとしてペアが存在していても、そのペアは表示しません。

読者は随時変更できるので、あくまで最初にどのモードで表示するか、ということです。


■ "page-progression-direction" …… ページめくり方向の初期値

EPUB 側で page-progression-direction が未指定もしくは "default" だった場合に、
ページめくり方向として選択されます。
BiB/i はスクロールベースのリーダなので「ページってなんだよ」と思われるかもしれませんが、
これは固定レイアウトで２ページが見開きになるときの配置方向にも関わるのです。
また、固定レイアウトや縦書きのときはスクロール方向にも反映されます。

テストの名残で残っていますが、オプションにせず "ltr" 固定にするかもしれません。
というのも、デフォルトが "ltr" だと決めてかかっている EPUB が大半なので。


■ "spread-layout-direction" …… 見開き配置方向の初期値

このプリセットでは "vertical" / "horizontal" / "auto" の３種が指定でき、
その指定によって、最終的には "ttb" / "ltr" / "rtl" の３種に落とし込まれます。

デフォルトとして推奨いたしますところの "auto" では、
まず、EPUB 内で page-progression-direction に指定がある場合、
それに従って "ltr" / "rtl" いずれかとなります。
次に、EPUB 内に 指定がなくて EPUB 全体が固定レイアウトの場合、
このプリセットの "page-progression-direction" の決定に従って "ltr" / "rtl" いずれかとなります。
最後に、指定がなくて EPUB 全体がリフローの場合、
ウェブページっぽく上から下に並べる "ttb" となります。

"vertical" を指定するともれなく "ttb" となり、
"horizontal" ではこのプリセットの "page-progression-direction" どおり "ltr" / "rtl" となります。

ページめくり方向が水平の EPUB を敢えてタテ配置で表示すると、
便利だったり読みやすかったりする場合があります。（マンガは星海社「最前線」みたいに表示されます）

いずれにせよこれはデフォルト値で、
見開き配置方向＝スクロール方向は、読者が随時変更できます。

じつは、あらかじめ "ttb" / "ltr" / "rtl" を指定しても動作します。
が、あまりメリットはないし、とくに "ltr" と "rtl" を直接指定する意味はまずないと思うのですが、
一般の EPUB リーダではあまりみられない配置をおもしろがれる、かも、しれません。
ただし "ltr" / "rtl" については、
読者がタテヨコ変更ボタンで配置を変えると "page-progression-direction" の値で上書きされますので、
テスト目的以外ではご遠慮いただくのが無難です。


■ "book-padding-xxxx" …… ウィンドウ枠からコンテンツ見開きまでの余白

方向はコンテンツの配置に対して相対的で、
上から順に、行の開始方向・進行方向、行頭方向・行末方向です。

以下数値の単位はすべて px（ピクセル）。
（JavaScript 的に !isNaN な値がセットされれば、式などを使っても大丈夫です。
衝突回避を意識してもらえればこのファイル内で変数などもどうぞ。（……誰が何のために使うのか）

さて、以下の他の項目にも関係する、方向について補足を。

設定の記述順は、before / after / start / end となっています。
書字方向が左から右でスクロール方向が上から下なら、上・下・左・右です。
日本語縦書きのように書字方向が上から下でスクロールが右から左の場合は、右・左・上・下。
日本のふつうのマンガのような右から左の固定レイアウトも、デフォルトは日本語縦書きと一緒。
一方、欧米のコミックのように左から右にスクロールする場合は、左・右・上・下。
……というかんじですが、こんがらがりますねえ。

余白に関するプリセットは CSS で提供したかったんですが、
そんなわけでレイアウトに対するバリエーションで指定が増えちゃうので、こうなりました。
（LESS にして less.js を組み込もうかと一瞬考えて、やめました）

見開きの配置方向を変更すると適用される絶対方向が変わるわけですが、
before と after、start と end の数字を同じにしておけばとにかく安心です。
小説の行頭余白と行末余白を変えて表示したい、
……なんてときは start と end に差を付けることになるのですが、
そのプリセットをすべての本に適用するとイマイチかもしれません。
あとで触れますが、そもそもリーダ側でコンテンツに余白をつけるのはイロイロと微妙なんです。

ややコアな余談として、
ページめくり方向が "rtl" の EPUB を縦スクロール配置したとき、
上のとおりの方向指定に適用されない場合があります。
縦スクロールは BiB/i の目玉のひとつではありますが、
「writing-mode なのに horizontal-tb の horizontal ってオイ」
みたいな事情がありまして。どうかご勘弁を。

長くなっちゃいましたね。すみません。


■ "book-background" …… 見開きの下の背景

CSS そのままでどうぞ。つまり背景画像とかも使えます。


■ "spread-separation" …… 見開きと見開きの間隔

あくまで見開き同士の間隔です。
最初・最後の見開きとウィンドウの間には、
"book-padding-before" と "book-padding-before" が適用されます。


■ "spread-min-length" …… 固定レイアウトではなくコンテンツが少ないアイテムの見開き「長さ」をなにに合わせるか

固定レイアウトではないアイテム内のコンテンツがすくないとき、
見開きの「長さ」が短くてちょっとかっこわるいことがあります。
そういうときもとにかくコンテンツ自身の「長さ」のまま表示するか、
あるいは見開きをウィンドウいっぱいに合わせるか、A版比率で計算するか、選択できます。
（ちなみに固定レイアウトではない場合なので、見開き内はかならず１アイテムです）

お好みで選んでいただければと思うのですが、"self" はあまりおすすめできず、"A" がいちばん無難かもしれません。
スマートフォンのように小さかったり縦長だったりするデバイス向けには "window" が良さそうです。

ただし、たとえば表紙のように中身が画像１点だけのアイテムに限っては "self" のほうが良い場合もあります。
もし画像が連続するコンテンツであれば "self" を使ってみてもいいかもしれませんね、
（それよりは固定レイアウトで作るほうがいいと思いますが）

なお、ここでいう「長さ」とは横スクロール時は幅であり、縦スクロール時には高さのことです。

また、ウィンドウいっぱいを選んでも、
"book-padding-before" と "book-padding-after" の分は引いたうえで算出します。


■ "spread-min-length_single-image" …… 固定レイアウトではなく画像ひとつだけのアイテムの見開き「長さ」をぴったりにするか

前項で、画像１点だけのアイテムは "self" のほうが良いかもしれないと書きました。
一方で、全体的にはおすすめできないとも。

というわけで、画像１点だけのアイテムは設定を上書きできるようにしてみました。
指定値とその振る舞いは "spread-min-length" と同じで、画像１点のアイテムでのみこちらが優先されます。

つまり、"spread-min-length" は "window" なり "A" なりにしておいて、
この "single-image-spread-min-length" は "self" にする、ということができるわけです。

が。EPUB のつくりによっては制作者の意図が十分に反映されない場合があります。
たとえば、制作者は広い表示領域の真ん中に画像を浮かせて表示したかったのかもしれませんが、
「長さ」が画像ぴったりになってしまうと、ただ「幅」でセンタリングされただけになります。

本来そのように作り手側に意図する見え方がある場合は、
固定レイアウトを用いるなり CSS で領域の最低の「長さ」を確保するべきですが。
電書協のサンプルにもそのへんざっくりしているものがあったので。
このオプションを使ってもイマイチな表示結果になることはじゅうぶんありえるでしょう。

ということで、これは、正直に言って、とても使いづらいオプションです。
表紙用のアイテムだけに限定して作用させるようにしたり、
もしかすると将来的になくしてしまうかもしれません。


■ "spread-border-radius" …… 見開きのカドを丸めるならその半径

CSS 3 でできるようになったことのうち、
ウェブ制作者がもっともわかりやすく小躍りした、カド丸指定。
ついついつけちゃうカド丸。お好みに応じてどうぞ。


■ "spread-border-radius" …… 見開きに影を付けるなら CSS を

カド丸に並びウェブ制作者を小躍りさせた、影指定。
見開きのドロップシャドウです。CSS そのままの指定でどうぞ。
影を付けるとすこしスクロールがもたつくかもしれません。
ないほうがいいかもしれないですよ。不要なら "none" としてください。


■ "item-padding-xxxx" …… 見開き内の余白

見開き内、コンテンツまでの余白です。
方向は前述のものとおなじです。

ホントは全部 0 でいいんじゃないかと思うんですけど、
iBooks はじめ、制御不能な余白をつけるリーディングシステムが幅を利かせていることもあり（あれキライ）、
内部の CSS に余白を持たせていない EPUB がかなり多いですよね。そのためにあります。

中身が固定レイアウトのときは、強制的にすべて 0 になります。

また、余白にコンテンツ内部の背景が適用されない、ということにならないよう、すこしだけ工夫してみました。
万全ではないので、余白に背景が出ないような本に対しては指定を諦めてください（あまりないと思うけれど）。

余談ですが、BiB/i はコンテンツ内の html 要素と body 要素の margin / padding を 0 にします。
異論はあるでしょう。ぼくもモヤモヤしてます。
でも、そうしたほうが良好な結果が得られる場合が多いのです。


■ "center-end-spreads" …… 最初と最後の見開きが画面中央に来るように余白を調整するかどうか

縦書きの本やマンガの表紙など、幅の狭いアイテム１つで構成される見開きを、
"spread-min-length" や "single-image-spread-min-length" で "window" 以外で表示した場合、
たいていは画面に余りが出ます。

この設定を true にすると、"book-padding-before" / "book-padding-after" の値にかかわらず、
最初と最後の見開きが真ん中に来るように余白が調整されます。


■ loaded : true …… これはオプションではありません

この行は最後に残しておいてください。
（読み込みの完了を認識するためのフラグです）


ぜえぜえ。

